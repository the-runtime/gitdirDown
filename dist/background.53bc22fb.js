chrome.runtime.onStartup.addListener(()=>{chrome.contextMenus.create({id:"gitdl_id",title:"gitdirDown - Download Github folder",enabled:!0,contexts:["link"]})}),chrome.runtime.onInstalled.addListener(()=>{chrome.contextMenus.create({id:"gitdl_id",title:"gitdirDown - Download Github folder",enabled:!0,contexts:["link"]})}),chrome.contextMenus.onClicked.addListener(e=>{"https://github.com"==e.pageUrl.slice(0,18)&&void 0!=e.linkUrl&&chrome.tabs.create({url:chrome.runtime.getURL("content/download.html")},t=>{if("number"!=typeof t.id){console.log("Problem creating new tab with download page");return}setTimeout(function(){console.log("after 2 secs"),chrome.tabs.sendMessage(t.id??0,e.linkUrl)},500)})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJtYXBwaW5ncyI6IkFDRUEsT0FBTyxPQUFBLENBQVEsU0FBQSxDQUFVLFdBQUEsQ0FBWSxLQUNqQyxPQUFPLFlBQUEsQ0FBYSxNQUFBLENBQVEsQ0FDeEIsR0FBSSxXQUNKLE1BQU8sc0NBQ1AsUUFBUyxDQUFBLEVBQ1QsU0FBUyxDQUFDLE9BQU8sQUFDckIsRUFDSixHQUNBLE9BQU8sT0FBQSxDQUFRLFdBQUEsQ0FBWSxXQUFBLENBQVksS0FDbkMsT0FBTyxZQUFBLENBQWEsTUFBQSxDQUFRLENBQ3hCLEdBQUksV0FDSixNQUFPLHNDQUNQLFFBQVMsQ0FBQSxFQUNULFNBQVMsQ0FBQyxPQUFPLEFBQ3JCLEVBQ0osR0FDQSxPQUFPLFlBQUEsQ0FBYSxTQUFBLENBQVUsV0FBQSxDQUFZLEFBQUMsSUFDTixzQkFBN0IsRUFBSyxPQUFBLENBQVEsS0FBQSxDQUFNLEVBQUcsS0FDbEIsQUFBZ0IsS0FBQSxHQUFoQixFQUFLLE9BQUEsRUFJVCxPQUFPLElBQUEsQ0FBSyxNQUFBLENBQU8sQ0FBQyxJQUFLLE9BQU8sT0FBQSxDQUFRLE1BQUEsQ0FBTyx3QkFBd0IsRUFBRyxBQUFDLElBQ3ZFLEdBQUksQUFBa0IsVUFBbEIsT0FBTyxFQUFJLEVBQUEsQ0FBZ0IsQ0FDM0IsUUFBUSxHQUFBLENBQUksK0NBQ1osTUFDSixDQUNBLFdBQVksV0FDUixRQUFRLEdBQUEsQ0FBSSxnQkFDWixPQUFPLElBQUEsQ0FBSyxXQUFBLENBQVksRUFBSSxFQUFBLEVBQU0sRUFBRyxFQUFLLE9BQTFDLENBQ0osRUFBRyxJQUVQLEVBRVIiLCJzb3VyY2VzIjpbIjxhbm9uPiIsInNyYy9iYWNrZ3JvdW5kLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIigoKSA9PiB7XG5jaHJvbWUucnVudGltZS5vblN0YXJ0dXAuYWRkTGlzdGVuZXIoKCk9PntcbiAgICBjaHJvbWUuY29udGV4dE1lbnVzLmNyZWF0ZSh7XG4gICAgICAgIGlkOiBcImdpdGRsX2lkXCIsXG4gICAgICAgIHRpdGxlOiBcImdpdGRpckRvd24gLSBEb3dubG9hZCBHaXRodWIgZm9sZGVyXCIsXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIGNvbnRleHRzOiBbXG4gICAgICAgICAgICBcImxpbmtcIlxuICAgICAgICBdXG4gICAgfSk7XG59KTtcbmNocm9tZS5ydW50aW1lLm9uSW5zdGFsbGVkLmFkZExpc3RlbmVyKCgpPT57XG4gICAgY2hyb21lLmNvbnRleHRNZW51cy5jcmVhdGUoe1xuICAgICAgICBpZDogXCJnaXRkbF9pZFwiLFxuICAgICAgICB0aXRsZTogXCJnaXRkaXJEb3duIC0gRG93bmxvYWQgR2l0aHViIGZvbGRlclwiLFxuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBjb250ZXh0czogW1xuICAgICAgICAgICAgXCJsaW5rXCJcbiAgICAgICAgXVxuICAgIH0pO1xufSk7XG5jaHJvbWUuY29udGV4dE1lbnVzLm9uQ2xpY2tlZC5hZGRMaXN0ZW5lcigoaW5mbyk9PntcbiAgICBpZiAoaW5mby5wYWdlVXJsLnNsaWNlKDAsIDE4KSA9PSBcImh0dHBzOi8vZ2l0aHViLmNvbVwiKSB7XG4gICAgICAgIGlmIChpbmZvLmxpbmtVcmwgPT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICAgIGNocm9tZS50YWJzLmNyZWF0ZSh7XG4gICAgICAgICAgICB1cmw6IGNocm9tZS5ydW50aW1lLmdldFVSTChcImNvbnRlbnQvZG93bmxvYWQuaHRtbFwiKVxuICAgICAgICB9LCAodGFiKT0+e1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0YWIuaWQgIT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUHJvYmxlbSBjcmVhdGluZyBuZXcgdGFiIHdpdGggZG93bmxvYWQgcGFnZVwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYWZ0ZXIgMiBzZWNzXCIpO1xuICAgICAgICAgICAgICAgIGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKHRhYi5pZCA/PyAwLCBpbmZvLmxpbmtVcmwpO1xuICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG5cbn0pKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKdFlYQndhVzVuY3lJNklqdEJRVVZCTEU5QlFVOHNVVUZCVVN4VlFVRlZMRmxCUVZrN1NVRkRha01zVDBGQlR5eGhRVUZoTEU5QlFWRTdVVUZEZUVJc1NVRkJTVHRSUVVOS0xFOUJRVTg3VVVGRFVDeFRRVUZUTzFGQlExUXNWVUZCVXp0WlFVRkRPMU5CUVU4N1NVRkRja0k3UVVGRFNqdEJRVU5CTEU5QlFVOHNVVUZCVVN4WlFVRlpMRmxCUVZrN1NVRkRia01zVDBGQlR5eGhRVUZoTEU5QlFWRTdVVUZEZUVJc1NVRkJTVHRSUVVOS0xFOUJRVTg3VVVGRFVDeFRRVUZUTzFGQlExUXNWVUZCVXp0WlFVRkRPMU5CUVU4N1NVRkRja0k3UVVGRFNqdEJRVU5CTEU5QlFVOHNZVUZCWVN4VlFVRlZMRmxCUVZrc1EwRkJRenRKUVVOMlF5eEpRVUZKTEV0QlFVc3NVVUZCVVN4TlFVRk5MRWRCUVVjc1QwRkJUeXh6UWtGQmMwSTdVVUZEYmtRc1NVRkJTU3hMUVVGTExGZEJRVmNzVjBGRGFFSTdVVUZIU2l4UFFVRlBMRXRCUVVzc1QwRkJUenRaUVVGRExFdEJRVXNzVDBGQlR5eFJRVUZSTEU5QlFVODdVVUZCZDBJc1IwRkJSeXhEUVVGRE8xbEJRM1pGTEVsQlFVa3NUMEZCVHl4SlFVRkpMRTFCUVU4c1ZVRkJVenRuUWtGRE0wSXNVVUZCVVN4SlFVRkpPMmRDUVVOYU8xbEJRMG83V1VGRFFTeFhRVUZaTzJkQ1FVTlNMRkZCUVZFc1NVRkJTVHRuUWtGRFdpeFBRVUZQTEV0QlFVc3NXVUZCV1N4SlFVRkpMRTFCUVUwc1IwRkJSeXhMUVVGTE8xbEJRemxETEVkQlFVYzdVVUZGVUR0SlFVTktPMEZCUTBvaUxDSnpiM1Z5WTJWeklqcGJJbk55WXk5aVlXTnJaM0p2ZFc1a0xuUnpJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0JQYmtOc2FXTnJSR0YwWVNBOUlHTm9jbTl0WlM1amIyNTBaWGgwVFdWdWRYTXVUMjVEYkdsamEwUmhkR0U3WEc1Y2JtTm9jbTl0WlM1eWRXNTBhVzFsTG05dVUzUmhjblIxY0M1aFpHUk1hWE4wWlc1bGNpZ29LU0E5UGlCN1hHNGdJQ0FnWTJoeWIyMWxMbU52Ym5SbGVIUk5aVzUxY3k1amNtVmhkR1VvSUh0Y2JpQWdJQ0FnSUNBZ2FXUTZJRndpWjJsMFpHeGZhV1JjSWl4Y2JpQWdJQ0FnSUNBZ2RHbDBiR1U2SUZ3aVoybDBaR2x5Ukc5M2JpQXRJRVJ2ZDI1c2IyRmtJRWRwZEdoMVlpQm1iMnhrWlhKY0lpeGNiaUFnSUNBZ0lDQWdaVzVoWW14bFpEb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ1kyOXVkR1Y0ZEhNNlcxd2liR2x1YTF3aVhWeHVJQ0FnSUgwcFhHNTlLVnh1WTJoeWIyMWxMbkoxYm5ScGJXVXViMjVKYm5OMFlXeHNaV1F1WVdSa1RHbHpkR1Z1WlhJb0tDa2dQVDRnZTF4dUlDQWdJR05vY205dFpTNWpiMjUwWlhoMFRXVnVkWE11WTNKbFlYUmxLQ0I3WEc0Z0lDQWdJQ0FnSUdsa09pQmNJbWRwZEdSc1gybGtYQ0lzWEc0Z0lDQWdJQ0FnSUhScGRHeGxPaUJjSW1kcGRHUnBja1J2ZDI0Z0xTQkViM2R1Ykc5aFpDQkhhWFJvZFdJZ1ptOXNaR1Z5WENJc1hHNGdJQ0FnSUNBZ0lHVnVZV0pzWldRNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUdOdmJuUmxlSFJ6T2x0Y0lteHBibXRjSWwxY2JpQWdJQ0I5S1Z4dWZTbGNibU5vY205dFpTNWpiMjUwWlhoMFRXVnVkWE11YjI1RGJHbGphMlZrTG1Ga1pFeHBjM1JsYm1WeUtDaHBibVp2T2lCUGJrTnNhV05yUkdGMFlTa2dQVDRnZTF4dUlDQWdJR2xtSUNocGJtWnZMbkJoWjJWVmNtd3VjMnhwWTJVb01Dd2dNVGdwSUQwOUlGd2lhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x1Wm04dWJHbHVhMVZ5YkNBOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymx4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdZMmh5YjIxbExuUmhZbk11WTNKbFlYUmxLSHQxY213NklHTm9jbTl0WlM1eWRXNTBhVzFsTG1kbGRGVlNUQ2hjSW1OdmJuUmxiblF2Wkc5M2JteHZZV1F1YUhSdGJGd2lLWDBzSUNoMFlXSXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllvZEdGaUxtbGtLU0FoUFNCY0ltNTFiV0psY2x3aUtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWhjSWxCeWIySnNaVzBnWTNKbFlYUnBibWNnYm1WM0lIUmhZaUIzYVhSb0lHUnZkMjVzYjJGa0lIQmhaMlZjSWlsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTVjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb0lHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnloY0ltRm1kR1Z5SURJZ2MyVmpjMXdpS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOb2NtOXRaUzUwWVdKekxuTmxibVJOWlhOellXZGxLSFJoWWk1cFpDQS9QeUF3SUN4cGJtWnZMbXhwYm10VmNtd3BYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxDQTFNREFwWEc1Y2JpQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNCOVhHNTlLU0pkTENKdVlXMWxjeUk2VzEwc0luWmxjbk5wYjI0aU9qTXNJbVpwYkdVaU9pSmlZV05yWjNKdmRXNWtMa2hCVTBoZlVrVkdYMll3WTJVellUZzVaVFl4T0RWaU1ERXVhbk11YldGd0luMD1cbiIsImltcG9ydCBPbkNsaWNrRGF0YSA9IGNocm9tZS5jb250ZXh0TWVudXMuT25DbGlja0RhdGE7XG5cbmNocm9tZS5ydW50aW1lLm9uU3RhcnR1cC5hZGRMaXN0ZW5lcigoKSA9PiB7XG4gICAgY2hyb21lLmNvbnRleHRNZW51cy5jcmVhdGUoIHtcbiAgICAgICAgaWQ6IFwiZ2l0ZGxfaWRcIixcbiAgICAgICAgdGl0bGU6IFwiZ2l0ZGlyRG93biAtIERvd25sb2FkIEdpdGh1YiBmb2xkZXJcIixcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgY29udGV4dHM6W1wibGlua1wiXVxuICAgIH0pXG59KVxuY2hyb21lLnJ1bnRpbWUub25JbnN0YWxsZWQuYWRkTGlzdGVuZXIoKCkgPT4ge1xuICAgIGNocm9tZS5jb250ZXh0TWVudXMuY3JlYXRlKCB7XG4gICAgICAgIGlkOiBcImdpdGRsX2lkXCIsXG4gICAgICAgIHRpdGxlOiBcImdpdGRpckRvd24gLSBEb3dubG9hZCBHaXRodWIgZm9sZGVyXCIsXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIGNvbnRleHRzOltcImxpbmtcIl1cbiAgICB9KVxufSlcbmNocm9tZS5jb250ZXh0TWVudXMub25DbGlja2VkLmFkZExpc3RlbmVyKChpbmZvOiBPbkNsaWNrRGF0YSkgPT4ge1xuICAgIGlmIChpbmZvLnBhZ2VVcmwuc2xpY2UoMCwgMTgpID09IFwiaHR0cHM6Ly9naXRodWIuY29tXCIpIHtcbiAgICAgICAgaWYgKGluZm8ubGlua1VybCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgY2hyb21lLnRhYnMuY3JlYXRlKHt1cmw6IGNocm9tZS5ydW50aW1lLmdldFVSTChcImNvbnRlbnQvZG93bmxvYWQuaHRtbFwiKX0sICh0YWIpID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YodGFiLmlkKSAhPSBcIm51bWJlclwiKXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlByb2JsZW0gY3JlYXRpbmcgbmV3IHRhYiB3aXRoIGRvd25sb2FkIHBhZ2VcIilcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImFmdGVyIDIgc2Vjc1wiKVxuICAgICAgICAgICAgICAgIGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKHRhYi5pZCA/PyAwICxpbmZvLmxpbmtVcmwpXG4gICAgICAgICAgICB9LCA1MDApXG5cbiAgICAgICAgfSlcbiAgICB9XG59KSJdLCJuYW1lcyI6WyJjaHJvbWUiLCJydW50aW1lIiwib25TdGFydHVwIiwiYWRkTGlzdGVuZXIiLCJjb250ZXh0TWVudXMiLCJjcmVhdGUiLCJpZCIsInRpdGxlIiwiZW5hYmxlZCIsImNvbnRleHRzIiwib25JbnN0YWxsZWQiLCJvbkNsaWNrZWQiLCJpbmZvIiwicGFnZVVybCIsInNsaWNlIiwidW5kZWZpbmVkIiwibGlua1VybCIsInRhYnMiLCJ1cmwiLCJnZXRVUkwiLCJ0YWIiLCJjb25zb2xlIiwibG9nIiwic2V0VGltZW91dCIsInNlbmRNZXNzYWdlIl0sInZlcnNpb24iOjMsImZpbGUiOiJiYWNrZ3JvdW5kLkhBU0hfUkVGX2YwY2UzYTg5ZTYxODViMDEuanMubWFwIn0=
